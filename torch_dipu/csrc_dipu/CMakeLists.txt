set(DIPU_LIB torch_dipu)
set(DIPU_PYTHON_LIB torch_dipu_python)

# python path
include_directories(${PYTHON_INCLUDE_DIR})
message(${PYTHON_INCLUDE_DIR})

# dipu include path
set(DIPU_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../)
include_directories(${DIPU_PATH})

set(DIST_DIR ${DIPU_PATH}/dist/include)
include_directories(${DIST_DIR})

# src
file(GLOB RT_SRC_FILES runtime/core/guardimpl/*.cpp
    runtime/core/allocator.cpp
    runtime/core/DIPU*.cpp
    runtime/core/device.cpp
)

file(GLOB OP_SRC_FILES aten/RegisterDIPU.cpp
    aten/util/*.cpp
    aten/ops/*Kernel*.cpp
)

file(GLOB DIOPI_RT_FILES diopirt/*.cpp)

# vendor src
add_subdirectory(vendor/${UsedVendor})
include_directories(SYSTEM ${VENDOR_INCLUDE_DIRS})
link_directories(${VENDOR_LIB_DIRS})


# if (${UsedVendor} STREQUAL ${VendorMLU})
#     message(STATUS "---- vendor specific (but shouldn't exist)----")
# endif()

set(SOURCE_FILES
    common.cpp
    ${RT_SRC_FILES}
    ${OP_SRC_FILES}
    ${DIOPI_RT_FILES}
    ${VENDOR_FILES}
)

add_library(${DIPU_LIB} SHARED ${SOURCE_FILES})

# link
target_link_libraries(${DIPU_LIB} ${DIPU_VENDOR_LIB})

# need export LIBRARY_PATH=$DIOPI_ROOT:$LIBRARY_PATH;
target_link_libraries(${DIPU_LIB}  diopi_impl)
target_link_libraries(${DIPU_LIB}  c10 torch torch_cpu)

## copy vendor header file
set(VENDOR_DIST  "${DIST_DIR}/csrc_dipu/vendor/")
add_custom_target(copy_include
    COMMAND mkdir -p ${VENDOR_DIST}
    COMMAND cmake -E create_symlink ${CMAKE_CURRENT_SOURCE_DIR}/vendor/${UsedVendor}/vendorapi.h  ${VENDOR_DIST}/vendorapi.h
)
add_dependencies(${DIPU_LIB} copy_include)


# --------build bind in python --------------
file(GLOB BIND_SRC_FILES binding/Export*.cpp
   # binding/Patch*.cpp
)
set(BIND_FILES
    ${BIND_SRC_FILES}
)
add_library(${DIPU_PYTHON_LIB} SHARED ${BIND_SRC_FILES})
target_link_libraries(${DIPU_PYTHON_LIB} ${DIPU_LIB})


