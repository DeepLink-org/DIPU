name: dipu  ci
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev_v0.25
      - wgs/*
  pull_request:
    branches:
      - 'main'
      - 'dev_v0.25'

env:
  CAMB_CI_PATH: '/mnt/lustre/share/parrotsci/github/cibuild/${{ github.repository }}'
  NV_CI_PATH: '/mnt/cache/share/parrotsci/github/cibuild/DeepLink-org/DIPU'
  CAMB_SLURM_PAR: ${{ vars.CAMB_SLURM_PAR }}
  SH1988_SLURM_PAR: ${{ vars.SH1988_SLURM_PAR }}
  CLUSTER_CAMB: CAMB
  CLUSTER_1988: SH1984
  CAMB_TORCH_BASE_DIR: '/mnt/lustre/share/parrotsci/github/cibuild/pytorchbase'
  CI_BUILD_FLAG: "ci_build_flag"
  PYTORCH_COMMIT: ${{ vars.PYTORCH_COMMIT }}  # pytorch tag 2.0

concurrency:
  group: ${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  Rsync:
    name: Rsync code
    runs-on: github-poc-ci
    steps:
      - name: clone repo
        run: |
          cd ${GITHUB_WORKSPACE} && rm -rf dipu dipu_diopi && git clone https://github.com/DeepLink-org/DIPU.git && cd DIPU
          if [ $GITHUB_EVENT_NAME == "pull_request" ]; then
            echo "${{ github.base_ref }} "
            git checkout ${{ github.event.pull_request.head.sha }} && git merge --no-edit origin/${{ github.base_ref }}
          else
            echo $GITHUB_EVENT_NAME
            git checkout ${{ github.sha }}
          fi
          cd ${GITHUB_WORKSPACE} && cp -R DIPU DIPU_DIOPI

          cd ${GITHUB_WORKSPACE}/DIPU && rm -rf third_party/DIOPI && git submodule update --init --recursive
          if [ $GITHUB_EVENT_NAME == "pull_request" ]; then
            cd ./third_party/DIOPI && git checkout xt/change_to_pt2.0
          fi
          cd ${GITHUB_WORKSPACE}/DIPU
          rm -rf mmlab_pack && mkdir -p mmlab_pack && cd mmlab_pack
          bash ../scripts/ci/ci_one_iter.sh clone
          #  dipu_diopi depend on latest target diopi branch, not diopi in submodule. here assume diopi and dipu use same  'target branch' " github.base_ref "
          cd ${GITHUB_WORKSPACE}/dipu_diopi/third_party && rm -rf DIOPI && git clone https://github.com/DeepLink-org/DIOPI.git
#
#      - name: ci interruptible and support pr ci
#        run: |
#          cd ${GITHUB_WORKSPACE}/DIPU && bash scripts/ci/ci_interruptible.sh
#        env:
#          GITHUB_TOKEN: "${{ secrets.CI_TOKEN }}"
      - name: Rsync to Server
        run: |
          ssh ${CLUSTER_CAMB} "mkdir -p ${CAMB_CI_PATH}/${GITHUB_RUN_NUMBER}/source ${CAMB_CI_PATH}/${GITHUB_RUN_NUMBER}/source-main"
          rsync -a --delete ${GITHUB_WORKSPACE}/DIPU/ ${CLUSTER_CAMB}:${CAMB_CI_PATH}/${GITHUB_RUN_NUMBER}/source/
          rsync -a --delete ${GITHUB_WORKSPACE}/DIPU_DIOPI/ ${CLUSTER_CAMB}:${CAMB_CI_PATH}/${GITHUB_RUN_NUMBER}/source-main/
          ssh ${CLUSTER_1988} "mkdir -p ${NV_CI_PATH}/${GITHUB_RUN_NUMBER}/source ${NV_CI_PATH}/${GITHUB_RUN_NUMBER}/source-main"
          rsync -a --delete ${GITHUB_WORKSPACE}/DIPU/ ${CLUSTER_1988}:${NV_CI_PATH}/${GITHUB_RUN_NUMBER}/source/
          rsync -a --delete ${GITHUB_WORKSPACE}/DIPU_DIOPI/ ${CLUSTER_1988}:${NV_CI_PATH}/${GITHUB_RUN_NUMBER}/source-main/
          result=`ssh ${CLUSTER_CAMB} """
                  mkdir -p ${CAMB_TORCH_BASE_DIR}/${PYTORCH_COMMIT}
                  cd ${CAMB_TORCH_BASE_DIR}/${PYTORCH_COMMIT}
                  if [ ! -f ${CI_BUILD_FLAG} ]; then
                    touch ${CI_BUILD_FLAG}
                  fi
                  cat ${CI_BUILD_FLAG}
                  """`
          echo "result:${result}"
          if [ "${result}x" = "${PYTORCH_COMMIT}"x ]; then
            echo "pytorch:${CAMB_TORCH_BASE_DIR}/${PYTORCH_COMMIT} exist."
          else
            echo "pytorch not exist, copy pytorch to ${CAMB_TORCH_BASE_DIR}/${PYTORCH_COMMIT}"
            ssh ${CLUSTER_CAMB} "rm -rf ${CAMB_TORCH_BASE_DIR}/${PYTORCH_COMMIT}"
            rsync -a --delete /home/autolink/rsync/sourcecode/pytorch/* ${CLUSTER_CAMB}:${CAMB_TORCH_BASE_DIR}/${PYTORCH_COMMIT}/
          fi

  Build-Pytorch:
    name: Build pytorch
    needs: [Rsync]
    runs-on: github-poc-ci
    env:
      MLU_REQUESTS: 0
    steps:
      - name: Build pytorch
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          cd ${CAMB_CI_PATH}/${GITHUB_RUN_NUMBER}/source
          source scripts/ci/camb/ci_camb_env.sh
          cd ${CAMB_TORCH_BASE_DIR}/${PYTORCH_COMMIT}
          echo "pwd: $(pwd)"
          if [ -f ${CI_BUILD_FLAG} ]; then
            echo "${CAMB_TORCH_BASE_DIR}/${PYTORCH_COMMIT} has been successfully compiled."
          else
            mkdir -p build && make clean
            export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"}
            BUILD_BINARY=0 USE_PRECOMPILED_HEADERS=1 BUILD_TEST=0
            srun --job-name=${GITHUB_JOB} --partition=${CAMB_SLURM_PAR} --time=40 \
            --gres=mlu:${MLU_REQUESTS} python setup.py install --prefix=./install_path
            echo "${PYTORCH_COMMIT}" > ${CI_BUILD_FLAG}
          fi
          """

  Build-Camb:
    name: Build dipu camb
    needs: [Build-Pytorch]
    runs-on: github-poc-ci
    env:
      MLU_REQUESTS: 1
    steps:
      - name: Build dipu
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          cd ${CAMB_CI_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} && cp -R source ${GITHUB_JOB}  && cd ${GITHUB_JOB}
          export PYTORCH_DIR=${CAMB_TORCH_BASE_DIR}/${PYTORCH_COMMIT}
          source scripts/ci/camb/ci_camb_env.sh
          srun --job-name=${GITHUB_JOB} --partition=${CAMB_SLURM_PAR} --time=40 \
          --gres=mlu:${MLU_REQUESTS} bash scripts/ci/camb/ci_camb_script.sh build_dipu \
          || ( cd ${CAMB_CI_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} && exit 1 )
          """

  Test-Camb-Diopi:
    name: test-camb-diopi
    needs: [Build-Camb]
    runs-on: github-poc-ci
    env:
      MLU_REQUESTS: 1
    steps:
      - name: Run-test
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          cd ${CAMB_CI_PATH}/${GITHUB_RUN_NUMBER}/ && cd Build-Camb
          export PYTORCH_DIR=${CAMB_TORCH_BASE_DIR}/${PYTORCH_COMMIT}
          source scripts/ci/camb/ci_camb_env.sh
          srun --job-name=${GITHUB_JOB} --partition=${CAMB_SLURM_PAR} --time=40 --gres=mlu:${MLU_REQUESTS} sh tests/run_camb_tests.sh
          """

  Build-Camb-Diopi:
    name: Build dipu camb diopi-latest-target
    needs: [Build-Pytorch]
    runs-on: github-poc-ci
    env:
      MLU_REQUESTS: 1
    steps:
      - name: Build dipu diopi-latest-target
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          cd ${CAMB_CI_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} && cp -R source-main ${GITHUB_JOB}  && cd ${GITHUB_JOB}
          export PYTORCH_DIR=${CAMB_TORCH_BASE_DIR}/${PYTORCH_COMMIT}
          source scripts/ci/camb/ci_camb_env.sh
          srun --job-name=${GITHUB_JOB} --partition=${CAMB_SLURM_PAR} --time=40 \
          --gres=mlu:${MLU_REQUESTS} bash scripts/ci/camb/ci_camb_script.sh build_dipu \
          || ( cd ${CAMB_CI_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} && exit 1 )
          """

  Test-Camb-Diopi-Latest-Target:
    name: test-camb-diopi-latest-target
    needs: [Build-Camb-Diopi]
    runs-on: github-poc-ci
    env:
      MLU_REQUESTS: 1
    steps:
      - name: Run-test
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          cd ${CAMB_CI_PATH}/${GITHUB_RUN_NUMBER}/ && cd Build-Camb-Diopi
          export PYTORCH_DIR=${CAMB_TORCH_BASE_DIR}/${PYTORCH_COMMIT}
          source scripts/ci/camb/ci_camb_env.sh
          srun --job-name=${GITHUB_JOB} --partition=${CAMB_SLURM_PAR} --time=40 --gres=mlu:${MLU_REQUESTS} sh tests/run_camb_tests.sh && rm -rf Build-Camb-Diopi \
          || ( cd ${CAMB_CI_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf Build-Camb-Diopi && exit 1 )
          """

  Test-One-Iter-Camb:
    name: test-one-iter-camb
    needs: [Build-Camb]
    runs-on: github-poc-ci
    env:
      MLU_REQUESTS: 1
    steps:
      - name: build-some-env
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          cd ${CAMB_CI_PATH}/${GITHUB_RUN_NUMBER}/Build-Camb
          export PYTORCH_DIR=${CAMB_TORCH_BASE_DIR}/${PYTORCH_COMMIT}
          echo "pytorch dir: \${PYTORCH_DIR}"
          source scripts/ci/camb/ci_camb_env.sh
          basic_path=${CAMB_CI_PATH}/${GITHUB_RUN_NUMBER}/Build-Camb/mmlab_pack
          export PYTHONPATH=\${basic_path}/mmengine:\$PYTHONPATH
          export PYTHONPATH=\${basic_path}/mmcv:\$PYTHONPATH
          export PYTHONPATH=\${pwd}:\$PYTHONPATH
          cd mmlab_pack
          srun --job-name=${GITHUB_RUN_NUMBER}_${GITHUB_JOB} --partition=${CAMB_SLURM_PAR} --gres=mlu:${MLU_REQUESTS} sh ../scripts/ci/ci_one_iter.sh build_camb
          """

      - name: run-one-iter-tools
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          cd ${CAMB_CI_PATH}/${GITHUB_RUN_NUMBER}/Build-Camb
          export PYTORCH_DIR=${CAMB_TORCH_BASE_DIR}/${PYTORCH_COMMIT}
          echo "pytorch dir: \${PYTORCH_DIR}"
          source scripts/ci/camb/ci_camb_env.sh
          basic_path=${CAMB_CI_PATH}/${GITHUB_RUN_NUMBER}/Build-Camb/mmlab_pack
          source scripts/ci/ci_one_iter.sh export_pythonpath_camb \${basic_path}
          cd mmlab_pack
          rm -rf one_iter_data
          python ../scripts/ci/ci_run_one_iter.py camb ${GITHUB_JOB} "mlu:${MLU_REQUESTS}" ${CAMB_SLURM_PAR} && rm -rf one_iter_data || (rm -rf one_iter_data && exit 1)
          """
  
  Build-Cuda:
    name: Build dipu cuda
    needs: [Rsync]
    runs-on: tps-diopi-ci
    env:
      GPU_REQUESTS: 1
    steps:
      - name: Build dipu
        run: |
          ssh ${CLUSTER_1988} """
          set -e
          cd ${NV_CI_PATH}/${GITHUB_RUN_NUMBER} && rm -rf ${GITHUB_JOB} && cp -R source ${GITHUB_JOB}  && cd ${GITHUB_JOB}
          source scripts/ci/nv/ci_nv_env.sh
          srun --job-name=${GITHUB_RUN_NUMBER}_${GITHUB_JOB} --partition=${SH1988_SLURM_PAR} --gres=gpu:${GPU_REQUESTS} bash scripts/ci/nv/ci_nv_script.sh build_dipu \
          || ( cd ${NV_CI_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} && exit 1 )
          """

  Test-Cuda-Diopi:
    name: test-cuda-diopi
    needs: [Build-Cuda]
    runs-on: tps-diopi-ci
    env:
      GPU_REQUESTS: 1
    steps:
      - name: Run-test
        run: |
          ssh ${CLUSTER_1988} """
          set -e
          cd ${NV_CI_PATH}/${GITHUB_RUN_NUMBER}/ && cd Build-Cuda
          source scripts/ci/nv/ci_nv_env.sh
          srun --job-name=${GITHUB_RUN_NUMBER}_${GITHUB_JOB} --partition=${SH1988_SLURM_PAR} --gres=gpu:${GPU_REQUESTS} --cpus-per-task=5 --mem=16G sh tests/run_nv_tests.sh
          """

  Build-Cuda-Diopi:
    name: Build dipu cuda diopi-latest-target
    needs: [Rsync]
    runs-on: tps-diopi-ci
    env:
      GPU_REQUESTS: 1
    steps:
      - name: Build dipu diopi-latest-target
        run: |
          ssh ${CLUSTER_1988} """
          set -e
          cd ${NV_CI_PATH}/${GITHUB_RUN_NUMBER} && rm -rf ${GITHUB_JOB} && cp -R source-main ${GITHUB_JOB}  && cd ${GITHUB_JOB}
          source scripts/ci/nv/ci_nv_env.sh
          srun --job-name=${GITHUB_RUN_NUMBER}_${GITHUB_JOB} --partition=${SH1988_SLURM_PAR} --gres=gpu:${GPU_REQUESTS} --cpus-per-task=5 --mem=16G bash scripts/ci/nv/ci_nv_script.sh build_dipu \
          || ( cd ${NV_CI_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} && exit 1 )
          """

  Test-Cuda-Diopi-Latest-Target:
    name: test-cuda-diopi-latest-target
    needs: [Build-Cuda-Diopi]
    runs-on: tps-diopi-ci
    env:
      GPU_REQUESTS: 1
    steps:
      - name: Run-test
        run: |
          ssh ${CLUSTER_1988} """
          set -e
          cd ${NV_CI_PATH}/${GITHUB_RUN_NUMBER}/ && cd Build-Cuda-Diopi
          source scripts/ci/nv/ci_nv_env.sh
          srun --job-name=${GITHUB_RUN_NUMBER}_${GITHUB_JOB} --partition=${SH1988_SLURM_PAR} --gres=gpu:${GPU_REQUESTS} --cpus-per-task=5 --mem=16G sh tests/run_nv_tests.sh && cd ${NV_CI_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf Build-Cuda-Diopi \
          || ( cd ${NV_CI_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} && exit 1 )
          """

  Test-One-Iter_Cuda:
    name: test-one-iter-cuda
    needs: [Build-Cuda]
    runs-on: tps-diopi-ci
    env:
      GPU_REQUESTS: 1
    steps:
      - name: build some env
        run: |
          ssh ${CLUSTER_1988} """
          set -e
          cd ${NV_CI_PATH}/${GITHUB_RUN_NUMBER}/ && cd Build-Cuda
          source scripts/ci/nv/ci_nv_env.sh
          basic_path=${NV_CI_PATH}/${GITHUB_RUN_NUMBER}/Build-Cuda/mmlab_pack
          export PYTHONPATH=\${basic_path}/mmengine:\$PYTHONPATH
          export PYTHONPATH=\${basic_path}/mmcv:\$PYTHONPATH
          export PYTHONPATH=\${pwd}:\$PYTHONPATH
          cd mmlab_pack
          srun --job-name=${GITHUB_RUN_NUMBER}_${GITHUB_JOB} --partition=${SH1988_SLURM_PAR} --gres=gpu:${GPU_REQUESTS} bash ../scripts/ci/ci_one_iter.sh build_cuda
          """

      - name: run-one-iter-tools
        run: |
          ssh ${CLUSTER_1988} """
          set -e
          cd ${NV_CI_PATH}/${GITHUB_RUN_NUMBER}/ && cd Build-Cuda
          source scripts/ci/nv/ci_nv_env.sh
          basic_path=${NV_CI_PATH}/${GITHUB_RUN_NUMBER}/Build-Cuda/mmlab_pack
          source scripts/ci/ci_one_iter.sh export_pythonpath_cuda \${basic_path}
          cd mmlab_pack
          rm -rf one_iter_data
          python ../scripts/ci/ci_run_one_iter.py cuda  ${GITHUB_RUN_NUMBER}_${GITHUB_JOB} "gpu:${GPU_REQUESTS}" ${SH1988_SLURM_PAR}  && rm -rf one_iter_data || (rm -rf one_iter_data && exit 1)
          """
