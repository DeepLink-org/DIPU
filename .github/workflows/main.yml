name: dipu_poc  ci
on:
  workflow_dispatch:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - 'main'

env:
  NFS_PATH: '/mnt/lustre/share/parrotsci/github/cibuild/${{ github.repository }}'
  SLURM_PAR_CAMB: ${{ secrets.SLURM_PAR_CAMB }}
  CLUSTER_CAMB: CAMB
  PYTORCH_BASE_DIR: '/mnt/lustre/share/parrotsci/github/cibuild/pytorchbase'
  CI_BUILD_FLAG: "ci_build_flag"
  PYTORCH_COMMIT: ${{ vars.PYTORCH_COMMIT }}  # pytorch tag 2.0   
  MMCV_VERSION: v2.0.0
  MMENGINE_VERSION: v0.7.3
  MMPRETRAIN_VERSION: dipu_v1.0.0rc7_one_iter_tool 

jobs:
  Rsync:
    name: Rsync code
    runs-on: github-poc-ci
    steps:
      - name: clone repo
        run: |
          cd ${GITHUB_WORKSPACE} && rm -rf dipu_poc && git clone https://github.com/DeepLink-org/dipu_poc.git && cd dipu_poc
          if [ $GITHUB_EVENT_NAME == "pull_request" ]; then
          git checkout ${{ github.event.pull_request.head.sha }} && git merge --no-edit main
          else
          git checkout ${{ github.sha }} &&  git merge --no-edit main
          fi
          cd third_party && rm -rf DIOPI && git clone https://github.com/DeepLink-org/DIOPI.git
      - name: ci interruptible and support pr ci
        run: |
          cd ${GITHUB_WORKSPACE}/dipu_poc && bash scripts/ci_interruptible.sh
        env:
          GITHUB_TOKEN: "${{ secrets.CI_TOKEN }}"
      - name: Rsync to Server
        run: |
          echo ${GITHUB_WORKSPACE}
          cd /home/autolink/rsync/sourcecode/pytorch && git checkout master && git pull \
          && git checkout ${PYTORCH_COMMIT} && git submodule update --init --recursive
          ssh ${CLUSTER_CAMB} "mkdir -p ${NFS_PATH}/${GITHUB_RUN_NUMBER}/source"
          rsync -a --delete ${GITHUB_WORKSPACE}/dipu_poc/ ${CLUSTER_CAMB}:${NFS_PATH}/${GITHUB_RUN_NUMBER}/source/
          result=`ssh ${CLUSTER_CAMB} """
                  mkdir -p ${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}
                  cd ${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}
                  if [ ! -f ${CI_BUILD_FLAG} ]; then
                    touch ${CI_BUILD_FLAG}
                  fi
                  cat ${CI_BUILD_FLAG}
                  """`
          echo "result:${result}"
          if [ "${result}x" = "${PYTORCH_COMMIT}"x ]; then
            echo "pytorch:${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT} exist."
          else
            echo "pytorch not exist, copy pytorch to ${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}"
            ssh ${CLUSTER_CAMB} "rm -rf ${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}"
            rsync -a --delete /home/autolink/rsync/sourcecode/pytorch/* ${CLUSTER_CAMB}:${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}/
          fi

  # Lint-C-Python:
  #   name: Lint c python
  #   runs-on: github-poc-ci
  #   needs: [Rsync]
  #   env:
  #     MLU_REQUESTS: 0
  #   steps:
  #     - name: lint-c-python
  #       run: |
  #         ssh ${CLUSTER_CAMB} """
  #         set -e
  #         cd ${NFS_PATH}/ && ls -al && find ${NFS_PATH}/ -maxdepth 1 -ctime 1 -type d |xargs rm -rf
  #         source /mnt/lustre/share/platform/env/${ENV_NAME}
  #         cd ${NFS_PATH}/${GITHUB_RUN_NUMBER} && rm -rf ${GITHUB_JOB} && cp -R source ${GITHUB_JOB} && cd ${GITHUB_JOB}
  #         srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_CAMB} bash scripts/ci_lint.sh py-lint &&
  #         bash scripts/ci_lint.sh cpp-lint &&  cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} || ( cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} && exit 1 )
  #         """

  Build-Pytorch:
    name: Build pytorch
    needs: [Rsync]
    runs-on: github-poc-ci
    env:
      MLU_REQUESTS: 0
    steps:
      - name: Build pytorch
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/source
          source scripts/ci_camb_env.sh
          cd ${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}
          echo "pwd: $(pwd)"
          if [ -f ${CI_BUILD_FLAG} ]; then
            echo "${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT} has been successfully compiled."
          else
            mkdir -p build && make clean
            export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"}
            BUILD_BINARY=0 USE_PRECOMPILED_HEADERS=1 BUILD_TEST=0
            srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_CAMB} --time=40 \
            --gres=mlu:${MLU_REQUESTS} python setup.py install --prefix=./install_path
            echo "${PYTORCH_COMMIT}" > ${CI_BUILD_FLAG}
          fi
          """

  Build-POC-Camb:
    name: Build diopi_poc camb
    needs: [Build-Pytorch]
    runs-on: github-poc-ci
    env:
      MLU_REQUESTS: 1
    steps:
      - name: Build diopi-poc
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} && cp -R source ${GITHUB_JOB}  && cd ${GITHUB_JOB}
          export PYTORCH_DIR=${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}
          source scripts/ci_camb_env.sh
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_CAMB} --time=40 \
          --gres=mlu:${MLU_REQUESTS} bash scripts/ci_camb_script.sh build_dipu \
          || ( cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} && exit 1 )
          """

  Test-Camb:
    name: test-camb
    needs: [Build-POC-Camb]
    runs-on: github-poc-ci
    env:
      MLU_REQUESTS: 1
    steps:
      - name: Run-test
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && cd Build-POC-Camb
          export PYTORCH_DIR=${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}
          source scripts/ci_camb_env.sh
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_CAMB} --time=40 --gres=mlu:${MLU_REQUESTS} sh tests/run_camb_tests.sh
          """
  
  Test-One-Iter:
    name: test-one-iter
    needs: [Build-POC-Camb]
    runs-on: github-poc-ci
    env:
      MLU_REQUESTS: 1
    steps:
      - name: clone-repos
        run: |
          cd ${GITHUB_WORKSPACE}
          rm -rf SMART && git clone -b ywt/one_iter_tool_for_mmcv_2.0 https://github.com/ParrotsDL/SMART.git
          rm -rf mmpretrain && git clone -b ${MMPRETRAIN_VERSION} https://github.com/DeepLink-org/mmpretrain.git
          rm -rf mmcv && git clone -b ${MMCV_VERSION} https://github.com/open-mmlab/mmcv.git
          rm -rf mmengine && git clone -b ${MMENGINE_VERSION} https://github.com/open-mmlab/mmengine.git
          rsync -a --include='mmcv/***' --include='mmpretrain/***' --include='mmengine/***' --include='SMART/***' --exclude='*' ${GITHUB_WORKSPACE}/ ${CLUSTER_CAMB}:${NFS_PATH}/${GITHUB_RUN_NUMBER}/Build-POC-Camb/

      - name: run-one-iter-tools
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && cd Build-POC-Camb
          export PYTORCH_DIR=${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}
          source scripts/ci_camb_env.sh
          export PYTHONPATH=${NFS_PATH}/${GITHUB_RUN_NUMBER}/Build-POC-Camb/mmengine:${NFS_PATH}/${GITHUB_RUN_NUMBER}/Build-POC-Camb/mmcv:${NFS_PATH}/${GITHUB_RUN_NUMBER}/Build-POC-Camb/SMART/tools/one_iter_tool/one_iter:$PYTHONPATH
          echo 'MLU_INVOKE_BLOCKING='
          echo ${MLU_INVOKE_BLOCKING}
          export MLU_INVOKE_BLOCKING=1
          echo 'MLU_INVOKE_BLOCKING='
          echo ${MLU_INVOKE_BLOCKING}
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_CAMB}  --gres=mlu:${MLU_REQUESTS} sh scripts/ci_camb_one_iter.sh
          """
