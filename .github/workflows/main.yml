name: dipu_poc  ci
on:
  push:
    branches:
      - '**'
    tags:
      - '**'
  pull_request:
    branches:
      - 'main'

env:
  NFS_PATH: '/mnt/lustre/share/parrotsci/github/cibuild/${{ github.repository }}'
  SLURM_PAR_CAMB: ${{ secrets.SLURM_PAR_CAMB }}
  CLUSTER_CAMB: CAMB
  PYTORCH_BASE_DIR: '/mnt/lustre/share/parrotsci/github/cibuild/pytorchbase'
  CI_BUILD_FLAG: "ci_build_flag"
  PYTORCH_COMMIT: ${{ vars.PYTORCH_COMMIT }}  # pytorch tag 2.0
  NV_PVC_PATH: '/nvme/share/share/github/cibuild/${{ github.repository }}'
  NV_SOURCE_PATH: '/nvme/share/share/github/sourcecode'
  CI_IMAGE: "registry.sensetime.com/parrots/ci:linux-bionic-cuda11.7-cudnn8-py3-gcc7"
  TORCH_CUDA_ARCH_LIST: "Volta;7.0;7.5;8.0;8.6"

jobs:
  Rsync:
    name: Rsync code
    runs-on: github-poc-ci
    steps:
      - name: clone repo and rsync pytorch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.CI_TOKEN }}
          fetch-depth: '0'
          submodules: 'true'
      - name: Rsync to Server
        run: |
          echo ${GITHUB_WORKSPACE}
          cd /home/autolink/rsync/sourcecode/pytorch && git checkout master && git pull \
          && git checkout ${PYTORCH_COMMIT} && git submodule update --init --recursive
          ssh ${CLUSTER_CAMB} "mkdir -p ${NFS_PATH}/${GITHUB_RUN_NUMBER}/source"
          rsync -a --delete ${GITHUB_WORKSPACE}/ ${CLUSTER_CAMB}:${NFS_PATH}/${GITHUB_RUN_NUMBER}/source/
          result=`ssh ${CLUSTER_CAMB} """
                  mkdir -p ${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}
                  cd ${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}
                  if [ ! -f ${CI_BUILD_FLAG} ]; then
                    touch ${CI_BUILD_FLAG}
                  fi
                  cat ${CI_BUILD_FLAG}
                  """`
          echo "result:${result}"
          if [ "${result}x" = "${PYTORCH_COMMIT}"x ]; then
            echo "pytorch:${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT} exist."
          else
            echo "pytorch not exist, copy pytorch to ${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}"
            ssh ${CLUSTER_CAMB} "rm -rf ${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}"
            rsync -a --delete /home/autolink/rsync/sourcecode/pytorch/* ${CLUSTER_CAMB}:${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}/
          fi

  # Lint-C-Python:
  #   name: Lint c python
  #   runs-on: github-poc-ci
  #   needs: [Rsync]
  #   env:
  #     MLU_REQUESTS: 0
  #   steps:
  #     - name: lint-c-python
  #       run: |
  #         ssh ${CLUSTER_CAMB} """
  #         set -e
  #         cd ${NFS_PATH}/ && ls -al && find ${NFS_PATH}/ -maxdepth 1 -ctime 1 -type d |xargs rm -rf
  #         source /mnt/lustre/share/platform/env/${ENV_NAME}
  #         cd ${NFS_PATH}/${GITHUB_RUN_NUMBER} && rm -rf ${GITHUB_JOB} && cp -R source ${GITHUB_JOB} && cd ${GITHUB_JOB}
  #         srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_CAMB} bash scripts/ci_lint.sh py-lint &&
  #         bash scripts/ci_lint.sh cpp-lint &&  cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} || ( cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} && exit 1 )
  #         """

  Build-Pytorch:
    name: Build pytorch Camb
    needs: [Rsync]
    runs-on: github-poc-ci
    env:
      MLU_REQUESTS: 0
    steps:
      - name: Build pytorch
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/source
          source scripts/ci_camb_env.sh
          cd ${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}
          echo "pwd: $(pwd)"
          if [ -f ${CI_BUILD_FLAG} ]; then
            echo "${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT} has been successfully compiled."
          else
            mkdir -p build && make clean
            export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"}
            BUILD_BINARY=0 USE_PRECOMPILED_HEADERS=1 BUILD_TEST=0
            srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_CAMB} --time=40 \
            --gres=mlu:${MLU_REQUESTS} python setup.py install --prefix=./install_path
            echo "${PYTORCH_COMMIT}" > ${CI_BUILD_FLAG}
          fi
          """

  Build-POC-Camb:
    name: Build diopi_poc camb
    needs: [Build-Pytorch]
    runs-on: github-poc-ci
    env:
      MLU_REQUESTS: 1
    steps:
      - name: Build diopi-poc
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} && cp -R source ${GITHUB_JOB}  && cd ${GITHUB_JOB}
          export PYTORCH_DIR=${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}
          source scripts/ci_camb_env.sh
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_CAMB} --time=40 \
          --gres=mlu:${MLU_REQUESTS} bash scripts/ci_camb_script.sh build_dipu \
          || ( cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} && exit 1 )
          """

  Test-Camb:
    name: test-camb
    needs: [Build-POC-Camb]
    runs-on: github-poc-ci
    env:
      MLU_REQUESTS: 1
    steps:
      - name: Run-test
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && cd Build-POC-Camb
          export PYTORCH_DIR=${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}
          source scripts/ci_camb_env.sh
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_CAMB} --time=40 --gres=mlu:${MLU_REQUESTS} sh tests/run_camb_tests.sh
          """

  Build-Pytorch-NV:
    name: Build pytorch NV
    needs: [Rsync]
    runs-on: tps-pytorch-ci
    env:
      GPU_REQUESTS: 0
      DEBUG: 0
      HOME: "/var/lib/jenkins"
    steps:
      - name: clone repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.CI_TOKEN }}
          fetch-depth: '0'
          submodules: 'true'
      - name: rsync and pull code
        run: |
          cd ${NV_PVC_PATH} && rm -rf ${GITHUB_RUN_NUMBER} && mkdir -p ${GITHUB_RUN_NUMBER}/artifacts
          rsync -a --delete ${GITHUB_WORKSPACE}/ ${NV_PVC_PATH}/${GITHUB_RUN_NUMBER}
          cd ${NV_SOURCE_PATH}/pytorch/pytorch && git stash && git checkout main && git pull \
          && git checkout ${PYTORCH_COMMIT} && git submodule update --init --recursive
      - name: build
        run: |
          set -e
          set -o pipefail
          if [ -f ${NV_SOURCE_PATH}/pytorch/${PYTORCH_COMMIT} ]; then
            echo "${NV_SOURCE_PATH}/pytorch/${PYTORCH_COMMIT} has been successfully compiled."
            cd ${HOME}/pytorch/pytorch/ && cp -R build dist /home/artifacts/
          else
            cd ${NV_SOURCE_PATH}/pytorch/pytorch && git clean -xdf && echo '${{ toJSON(env) }}' |grep -v '{\|}'> ${GITHUB_JOB} && sed -i 's/\"//g' ${GITHUB_JOB} && sed -i 's/,//g' ${GITHUB_JOB} && sed -i 's/:[ ]/=\"/g' ${GITHUB_JOB} && sed -i 's/$/&\"/' ${GITHUB_JOB} && sed -i 's/^/&export/' ${GITHUB_JOB}
            container_name=$(docker run --tty --detach \
            -v ${NV_PVC_PATH}/${GITHUB_RUN_NUMBER}/:/home/ \
            -v ${NV_SOURCE_PATH}/tools:${HOME}/tools \
            -v ${NV_SOURCE_PATH}/pytorch:${HOME}/pytorch \
            ${CI_IMAGE} )
            docker exec -t "${container_name}" bash -c "source ${HOME}/tools/run.sh && cd ${HOME}/pytorch/pytorch/ && source ${GITHUB_JOB} && BUILD_BINARY=0 USE_PRECOMPILED_HEADERS=1 BUILD_TEST=0 bash .ci/pytorch/build.sh && cp -R build dist /home/artifacts/ && echo 'build'> ${HOME}/pytorch/${PYTORCH_COMMIT} " \
            && docker rm -f ${container_name} || ( docker rm -f ${container_name} && exit 1 )
          fi
